package cmw

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	cose "github.com/veraison/go-cose"
)

func TestCMW_Signed_CBOR_roundtrip_ok(t *testing.T) {
	in := makeCMWCollection()
	c0, _ := in.MarshalCBOR()

	signer, verifier, err := getCOSESignerAndVerifier(t, testES256Key, cose.AlgorithmES256)
	require.NoError(t, err)

	got, err := in.SignCBOR(signer)
	assert.NoError(t, err)

	var out CMW
	err = out.VerifyCBOR(verifier, got)
	assert.NoError(t, err)

	c1, _ := out.MarshalCBOR()
	assert.Equal(t, c0, c1)
}

func TestCMW_Signed_CBOR_Verify_phdr_failures(t *testing.T) {
	tvs := []struct {
		v []byte
		e string
	}{
		{
			mustHexDecode("d28457a103746170706c69636174696f6e2f636d772b63626f72a058dea4685f5f636d77635f74737461673a696574662e6f72672c323032343a586a6d75726d75726c657373a2685f5f636d77635f74737461673a696574662e6f72672c323032343a596a706f6c7973636f7069638378186170706c69636174696f6e2f6561742d7563732b6a736f6e527b226561745f6e6f6e6365223a202e2e2e7d086c6272657477616c6461646f6d8278186170706c69636174696f6e2f6561742d7563732b63626f7242a10a7170686f746f656c656374726f67726170688378186170706c69636174696f6e2f6561742d7563732b63626f7243827818035840c274b981723930b3cc14912fe385a9dd2b29425a60afb01ebc625444ac05edd74bd7ebc69faa1b961606b58b575bf4ade87e5835d90454c6336a6cead4b3e5c7"),
			"missing mandatory alg parameter in signed-cbor-cmw protected headers",
		},
		{
			mustHexDecode("d28443a10126a058dea4685f5f636d77635f74737461673a696574662e6f72672c323032343a586a6d75726d75726c657373a2685f5f636d77635f74737461673a696574662e6f72672c323032343a596a706f6c7973636f7069638378186170706c69636174696f6e2f6561742d7563732b6a736f6e527b226561745f6e6f6e6365223a202e2e2e7d086c6272657477616c6461646f6d8278186170706c69636174696f6e2f6561742d7563732b63626f7242a10a7170686f746f656c656374726f67726170688378186170706c69636174696f6e2f6561742d7563732b63626f7243827818035840c274b981723930b3cc14912fe385a9dd2b29425a60afb01ebc625444ac05edd74bd7ebc69faa1b961606b58b575bf4ade87e5835d90454c6336a6cead4b3e5c7"),
			"missing mandatory cty parameter in signed-cbor-cmw protected headers",
		},
		{
			mustHexDecode("d2845820a2012603781a6170706c69636174696f6e2f736f6d657468696e672b656c7365a058dea4685f5f636d77635f74737461673a696574662e6f72672c323032343a586a6d75726d75726c657373a2685f5f636d77635f74737461673a696574662e6f72672c323032343a596a706f6c7973636f7069638378186170706c69636174696f6e2f6561742d7563732b6a736f6e527b226561745f6e6f6e6365223a202e2e2e7d086c6272657477616c6461646f6d8278186170706c69636174696f6e2f6561742d7563732b63626f7242a10a7170686f746f656c656374726f67726170688378186170706c69636174696f6e2f6561742d7563732b63626f7243827818035840c274b981723930b3cc14912fe385a9dd2b29425a60afb01ebc625444ac05edd74bd7ebc69faa1b961606b58b575bf4ade87e5835d90454c6336a6cead4b3e5c7"),
			"unexpected content type in signed-cbor-cmw: application/something+else",
		},
		{
			// clobbered signature field
			mustHexDecode("d2845819a2012603746170706c69636174696f6e2f636d772b63626f72a058dea4685f5f636d77635f74737461673a696574662e6f72672c323032343a586a6d75726d75726c657373a2685f5f636d77635f74737461673a696574662e6f72672c323032343a596a706f6c7973636f7069638378186170706c69636174696f6e2f6561742d7563732b6a736f6e527b226561745f6e6f6e6365223a202e2e2e7d086c6272657477616c6461646f6d8278186170706c69636174696f6e2f6561742d7563732b63626f7242a10a7170686f746f656c656374726f67726170688378186170706c69636174696f6e2f6561742d7563732b63626f7243827818035840c274b981723930b3cc14912fe385a9dd2b29425a60afb01ebc625444ac05edd74bd7ebc69faa1b961606b58b575bf4ade87e5835d90454c6336a6cead4b3e5ff"),
			"signed-cbor-cmw signature verification failed: verification error",
		},
		{
			mustHexDecode("d2845819a20126037461"),
			"CBOR decoding signed-cbor-cmw: unexpected EOF",
		},
		{
			// invalid CMW payload 0xff (start of indef-length)
			mustHexDecode("d2845819a2012603746170706c69636174696f6e2f636d772b63626f72a041ff5840746bbcd3f317eeed7de98aae40e0940dbae9f08a348bca6015c58e03eba1090d3f5c6bbcf6237fa0b74670c45eda09835d36d43c970c3e9df50811144e42aeff"),
			"CBOR decoding signed-cbor-cmw payload: decoding tag",
		},
	}

	_, verifier, err := getCOSESignerAndVerifier(t, testES256Key, cose.AlgorithmES256)
	require.NoError(t, err)

	for _, tv := range tvs {
		var c CMW
		err := c.VerifyCBOR(verifier, tv.v)
		assert.ErrorContains(t, err, tv.e)
	}
}
